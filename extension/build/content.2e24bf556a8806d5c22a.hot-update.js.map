{"version":3,"file":"content.2e24bf556a8806d5c22a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;;;;;;;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://fix-your-netflix-experiment-extension/./src/utils/keyboard_hotkeys/simulate_bitrate_menu_hotkeys.js","webpack://fix-your-netflix-experiment-extension/./src/pages/Content/QualityEnhancer.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/classes/BitrateMenu.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/classes/CustomLogger.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/html_element_extractors/get_bitrate_menu_elements.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/time_utils.ts","webpack://fix-your-netflix-experiment-extension/webpack/runtime/define property getters","webpack://fix-your-netflix-experiment-extension/webpack/runtime/getFullHash","webpack://fix-your-netflix-experiment-extension/webpack/runtime/harmony module decorator"],"sourcesContent":["\nexport const simulate_bitrate_menu_hotkey = () => {\n    document.dispatchEvent(\n        new KeyboardEvent(\"keydown\", {\n            key: \"S\",\n            altKey: true,\n            ctrlKey: true,\n            shiftKey: true,\n            bubbles: true,\n            code: \"KeyS\",\n            which: 83,\n            cancelable: true,\n            composed: true,\n            keyCode: 83\n        })\n    )\n}","import { BitrateMenu } from \"../../utils/classes/BitrateMenu\";\nimport { CustomLogger } from \"../../utils/classes/CustomLogger\";\nexport class QualityEnhancer {\n    constructor() {\n        this.init = async () => {\n            this.bitrate_menu.init();\n            window.document.onkeydown = async (e) => {\n                if (e.key === \"G\") {\n                    console.log(\"Resetting\");\n                    await this.reset_video_quality();\n                }\n            };\n        };\n        this.reset_video_quality = async () => {\n            const available_bitrates = this.bi;\n            const best = await this.bitrate_menu.get_available_bitrates()[0];\n            await this.bitrate_menu.set_bitrate(best);\n        };\n        this.logger = new CustomLogger(\"[QualityEnhancer]\");\n        this.bitrate_menu = new BitrateMenu();\n    }\n}\n","import { CustomLogger } from \"./CustomLogger\";\nimport { invoke_bitrate_menu_and_get_html_elements } from \"../html_element_extractors/get_bitrate_menu_elements\";\nimport { simulate_bitrate_menu_hotkey } from \"../keyboard_hotkeys/simulate_bitrate_menu_hotkeys\";\nexport class BitrateMenu {\n    constructor() {\n        /**\n         *  Invokes bitrate menu and assings bitrate menu's HTML elements\n         *  to instance attributes.\n         *  Closes bitrate menu by simulating click event on Reset button.\n        */\n        this.init = async () => {\n            await this.invoke_bitrate_menu();\n            //this.reset_button.click()   <-- alternative way of closing the menu but it also resets the bitrates\n            simulate_bitrate_menu_hotkey(); // Close bitrate menu after initialization is finished\n        };\n        /**\n         *  Invokes bitrate_menu and reassigns HTML elements\n         *  Reassigning elements is important because bitrate menu is removed from DOM tree\n         *  after overriding bitrate value or reseting\n        */\n        this.invoke_bitrate_menu = async () => {\n            this.logger.log(\"Invoking bitrate menu...\");\n            // Invoke bitrate menu and get html elements\n            this.bitrate_menu_elements = await invoke_bitrate_menu_and_get_html_elements();\n            this.available_bitrates = this.bitrate_menu_elements.bitrate_values;\n            this.override_button = this.bitrate_menu_elements.override_button;\n            this.reset_button = this.bitrate_menu_elements.reset_button;\n            this.select = this.bitrate_menu_elements.select;\n            this.logger.log(\"Bitrate menu invoked.\");\n        };\n        /**\n         * Returns array of available bitrate values\n         * @returns {Array<number>} Available bitrate values\n        */\n        this.get_available_bitrates = () => {\n            return this.available_bitrates;\n        };\n        /**\n         * Returns HTML elements of bitrate menu\n         * @returns {T_BITRATE_MENU_ELEMENTS}\n        */\n        this.get_bitrate_menu_elements = () => {\n            if (this.bitrate_menu_elements) {\n                return this.bitrate_menu_elements;\n            }\n        };\n        /**\n         * Method checks if provided bitrate is available in bitrate menu.\n         * If it is then the same value is returned.\n         * If not - the closest value is found and returned.\n         * @param {number} bitrate\n         * @returns {number} Returns closest available bitrate to provided value\n        */\n        this.check_bitrate_availability = (bitrate) => {\n            if (this.available_bitrates.includes(bitrate)) {\n                return bitrate;\n            }\n            else {\n                this.logger.log(\"Provided bitrate is not available. Finding closest value...\");\n                const closest_bitrate = this.available_bitrates.reduce((prev, curr) => {\n                    return (Math.abs(curr - bitrate) < Math.abs(prev - bitrate) ? curr : prev);\n                });\n                this.logger.log(`Closest bitrate to ${bitrate} is ${closest_bitrate}`);\n                return closest_bitrate;\n            }\n        };\n        this.available_bitrates = [];\n        this.logger = new CustomLogger(\"[BitrateMenu]\");\n    }\n    /**\n     * Overrides current bitrate with new bitrate value\n     * provided as a parameter\n     * @param {number} bitrate\n    */\n    async set_bitrate(bitrate) {\n        if (this.select && this.override_button) {\n            this.logger.log(`Setting bitrate to: ${bitrate}`);\n            this.select.value = bitrate.toString();\n            this.logger.log(`SELECTED BITRATE VALUE: ${this.select.value}`);\n            this.override_button.click();\n        }\n    }\n}\n","import { get_local_datetime } from \"../time_utils\";\nexport class CustomLogger {\n    constructor(prefix) {\n        this.log = (content) => {\n            const prefix_date = `${this.prefix} | ${get_local_datetime(new Date())} |`;\n            this.original_logger(prefix_date, content);\n        };\n        this.prefix = prefix;\n        this.original_logger = console.log;\n    }\n}\n","import { simulate_bitrate_menu_hotkey } from \"../keyboard_hotkeys/simulate_bitrate_menu_hotkeys.js\";\n/**\n * Function executes subfunction in intervals until bitrate menu elements are retrieved\n * and HTML elements are extracted using extract_html_elements method\n*/\nexport const invoke_bitrate_menu_and_get_html_elements = async () => {\n    return new Promise((resolve) => {\n        let timer;\n        timer = setInterval(() => {\n            // Simulate bitrate menu hotkey\n            simulate_bitrate_menu_hotkey();\n            try {\n                const bitrate_menu_elements = extract_html_elements();\n                const bitrate_values = bitrate_menu_elements.bitrate_values;\n                const override_button = bitrate_menu_elements.override_button;\n                const reset_button = bitrate_menu_elements.reset_button;\n                // Set opacity of the element to required value\n                if (bitrate_values.length > 0 && override_button != null && reset_button != null) {\n                    clearInterval(timer);\n                    resolve(bitrate_menu_elements);\n                }\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }, 500);\n    });\n};\n/**\n * Helper method used to extract HTML elemnets from DOM tree\n * @returns{object} Object of key:values where values are HTML elements, possible to unpack\n*/\nconst extract_html_elements = () => {\n    // Get outter menu container\n    const container = [...document.querySelectorAll(\"div\")].filter(item => item.innerText.match(\"Video Bitrate\"))[1];\n    const override_button = [...document.querySelectorAll(\"button\")].filter(button => button.innerText.match(\"Override\"))[0];\n    const reset_button = [...document.querySelectorAll(\"button\")].filter(button => button.innerText.match(\"Reset\"))[0];\n    // Get bitrate menu container\n    const bitrate_menu_div = container.childNodes[1];\n    const select = bitrate_menu_div.childNodes[1];\n    const options = Array.from(bitrate_menu_div.childNodes[1].childNodes);\n    const bitrate_values = Array.from(bitrate_menu_div.childNodes[1].childNodes).map(option => {\n        const o = option;\n        return parseInt(o.value);\n    });\n    return {\n        container: container,\n        override_button: override_button,\n        reset_button: reset_button,\n        select: select,\n        options: options,\n        bitrate_values: bitrate_values\n    };\n};\n","export const get_local_datetime = (object) => {\n    const year = object.getFullYear();\n    const month = (object.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = object.getDate().toString().padStart(2, \"0\");\n    const hours = object.getHours().toString().padStart(2, \"0\");\n    const minutes = object.getMinutes().toString().padStart(2, \"0\");\n    const seconds = object.getSeconds().toString().padStart(2, \"0\");\n    const milliseconds = object.getMilliseconds().toString().padStart(3, \"0\");\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}`; // <-- Local datetime in extended ISO format ''YYYY-MM-DDTHH:MM:SS:XXX''\n};\nexport const get_local_datetime_and_timezone = (object) => {\n    // Get the datetime\n    const year = object.getFullYear();\n    const month = (object.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = object.getDate().toString().padStart(2, \"0\");\n    const hours = object.getHours().toString().padStart(2, \"0\");\n    const minutes = object.getMinutes().toString().padStart(2, \"0\");\n    const seconds = object.getSeconds().toString().padStart(2, \"0\");\n    const milliseconds = object.getMilliseconds().toString().padStart(3, \"0\");\n    const datetime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}`;\n    // Get timezone offset in +/- HH:MM format\n    const timezone_offset_min = object.getTimezoneOffset();\n    const offset_hrs = Math.abs(timezone_offset_min / 60);\n    const offset_min = Math.abs(timezone_offset_min % 60);\n    if (timezone_offset_min <= 0) {\n        const timezone_standard = \"+\" + offset_hrs.toString().padStart(2, \"0\") + \":\" + offset_min.toString().padStart(2, \"0\");\n        return datetime + timezone_standard;\n    }\n    else {\n        const timezone_standard = \"-\" + offset_hrs.toString().padStart(2, \"0\") + \":\" + offset_min.toString().padStart(2, \"0\");\n        return datetime + timezone_standard;\n    }\n};\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.h = () => (\"c0d9157afcc9d5707782\")","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};"],"names":[],"sourceRoot":""}