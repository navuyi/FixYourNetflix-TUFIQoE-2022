{"version":3,"file":"background.8b1209c3b7ab93304101.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChEA","sources":["webpack://fix-your-netflix-experiment-extension/./src/pages/Background/index.ts","webpack://fix-your-netflix-experiment-extension/webpack/runtime/getFullHash"],"sourcesContent":["import { MESSAGE_HEADERS, MESSAGE_TEMPLATE } from \"../../config/config\";\nimport { Controller } from \"./modules/Controller\";\nimport { STORAGE_DEFAULT } from \"../../config/config\";\nimport { get_local_datetime } from \"../../utils/time_utils\";\n/**\n * Detect extension reloads and perform actions.\n * This listener callback executes only when extension is installed or reloaded.\n*/\nchrome.runtime.onInstalled.addListener(() => {\n    console.log(`[BackgroundScript] | ${get_local_datetime(new Date())} | Installing...`);\n    // Initialize local storage || WARNING --> THIS RESETS ALL chrome.storage KEYS TO DEFAULT VALUES\n    chrome.storage.local.set(STORAGE_DEFAULT);\n});\nchrome.t;\nchrome.action.onClicked.addListener(async (tab) => {\n    console.log(tab.id);\n    //await chrome.tabs.update(tab.id, {\n    //    url: \"setup.html\"\n    //})\n});\n/** Message listeners\n * DO NOT USE await inside onMessage listener callback's body.\n * REMEMBER to return true at the end of the onMessage listener callback's body.\n *\n * Returning true at the end tells the other side of connection to wait for response\n * that will asynchronously, that is why sendResponse is mandatory.\n * Using await inside callback's body would result in errors.\n*/\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    // do not use async/await within listener callback\n    /*no await!!!*/ receive_finished_signal(message, sender, sendResponse);\n    /*no await!!!*/ receive_redirect_signal(message, sender, sendResponse);\n    return true; // return true is essential to indicate that response will be sent asynchronously\n});\n// Initialize Controller instance\nconst controller = new Controller();\ncontroller.init();\n/**\n * Function checks if received message is signal indicating end of video\n * Redirects the tab that the message came from to the custom web page\n * REMEMBER to use sendResponse !!!\n*/\nconst receive_finished_signal = async (message, sender, sendResponse) => {\n    if (message[MESSAGE_TEMPLATE.HEADER] === MESSAGE_HEADERS.FINISHED) {\n        // Redirect to custom webpage\n        if (sender.tab) {\n            const tabId = sender.tab.id;\n            await chrome.tabs.update(tabId, {\n                url: \"break.html\"\n            });\n            sendResponse({ msg: \"Finish signal received\" }); // Essential sendResponse\n        }\n    }\n};\nconst receive_redirect_signal = async (message, sender, sendResponse) => {\n    if (message[MESSAGE_TEMPLATE.HEADER] === MESSAGE_HEADERS.REDIRECT) {\n        if (sender.tab) {\n            const tabId = sender.tab.id;\n            await chrome.tabs.update(tabId, {\n                url: message.data.url\n            });\n            sendResponse({ msg: \"Redirect signal received\" });\n        }\n    }\n};\n","__webpack_require__.h = () => (\"43c9c66660b9d7ef054f\")"],"names":[],"sourceRoot":""}