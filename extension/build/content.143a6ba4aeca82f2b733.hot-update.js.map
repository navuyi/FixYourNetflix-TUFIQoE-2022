{"version":3,"file":"content.143a6ba4aeca82f2b733.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA","sources":["webpack://fix-your-netflix-experiment-extension/./src/pages/Content/QualityEnhancer.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/classes/CustomLogger.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/classes/NetflixBitrateMenu.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/time_utils.ts","webpack://fix-your-netflix-experiment-extension/webpack/runtime/define property getters","webpack://fix-your-netflix-experiment-extension/webpack/runtime/getFullHash"],"sourcesContent":["import { CustomLogger } from \"../../utils/classes/CustomLogger\";\nimport { NetflixBitrateMenu } from \"../../utils/classes/NetflixBitrateMenu\";\nexport class QualityEnhancer {\n    constructor() {\n        this.init = async () => {\n            window.document.onkeydown = async (e) => {\n                if (e.key === \"G\") {\n                    console.log(\"Resetting\");\n                    await this.reset_video_quality();\n                }\n            };\n        };\n        this.reset_video_quality = async () => {\n            NetflixBitrateMenu.in;\n        };\n        this.logger = new CustomLogger(\"[QualityEnhancer]\");\n    }\n}\n","import { get_local_datetime } from \"../time_utils\";\nexport class CustomLogger {\n    constructor(prefix) {\n        this.log = (content) => {\n            const prefix_date = `${this.prefix} | ${get_local_datetime(new Date())} |`;\n            this.original_logger(prefix_date, content);\n        };\n        this.prefix = prefix;\n        this.original_logger = console.log;\n    }\n}\n","var _a;\nimport { CustomLogger } from \"./CustomLogger\";\nexport class NetflixBitrateMenu {\n}\n_a = NetflixBitrateMenu;\nNetflixBitrateMenu.logger = new CustomLogger(\"[NetflixBitrateMenu]\");\n/**\n * Blocking method!\n * Invokes Netflix's bitrate menu by calling repeatedly keybord event dispatch method\n * Method blocks execution untill menu is invoked\n * @returns {void}\n*/\nNetflixBitrateMenu.invoke = async () => {\n    let interval;\n    let attempt = 1;\n    return new Promise(resolve => {\n        interval = setInterval(() => {\n            NetflixBitrateMenu.logger.log(`Invoking bitrate menu by dispatching keyboard event. Attempt: ${attempt}`);\n            NetflixBitrateMenu.dispatch_invoker_event();\n            if (NetflixBitrateMenu.is_invoked() === true) {\n                clearInterval(interval);\n                resolve();\n            }\n            attempt += 1;\n        });\n    });\n};\nNetflixBitrateMenu.dispatch_invoker_event = () => {\n    NetflixBitrateMenu.logger.log(\"Dispatching keyboard event\");\n    document.dispatchEvent(new KeyboardEvent(\"keydown\", {\n        key: \"S\",\n        altKey: true,\n        ctrlKey: true,\n        shiftKey: true,\n        bubbles: true,\n        code: \"KeyS\",\n        which: 83,\n        cancelable: true,\n        composed: true,\n        keyCode: 83\n    }));\n};\nNetflixBitrateMenu.is_invoked = () => {\n    const container = [...document.querySelectorAll(\"div\")].filter(item => item.innerText.match(\"Video Bitrate\"))[1];\n    const override_button = [...document.querySelectorAll(\"button\")].filter(button => button.innerText.match(\"Override\"))[0];\n    const reset_button = [...document.querySelectorAll(\"button\")].filter(button => button.innerText.match(\"Reset\"))[0];\n    if ([container, override_button, reset_button].some(elem => elem == null)) {\n        NetflixBitrateMenu.logger.log(\"Not invoked!\");\n        return false;\n    }\n    else {\n        NetflixBitrateMenu.logger.log(\"Invoked\");\n        return true;\n    }\n};\nNetflixBitrateMenu.get_html_elements = () => {\n    const container = [...document.querySelectorAll(\"div\")].filter(item => item.innerText.match(\"Video Bitrate\"))[1];\n    const override_button = [...document.querySelectorAll(\"button\")].filter(button => button.innerText.match(\"Override\"))[0];\n    const reset_button = [...document.querySelectorAll(\"button\")].filter(button => button.innerText.match(\"Reset\"))[0];\n    if (NetflixBitrateMenu.is_invoked() === false) {\n        NetflixBitrateMenu.logger.log(\"BitrateMenu has to be invoked first! Elements not available.\");\n        return;\n    }\n    // Get BitrateMenu container content\n    const bitrate_menu_div = container.childNodes[1];\n    const select = bitrate_menu_div.childNodes[1];\n    const options = Array.from(bitrate_menu_div.childNodes[1].childNodes);\n    const bitrate_values = Array.from(bitrate_menu_div.childNodes[1].childNodes).map(option => {\n        const o = option;\n        return parseInt(o.value);\n    });\n    return {\n        container: container,\n        override_button: override_button,\n        reset_button: reset_button,\n        select: select,\n        options: options,\n        bitrate_values: bitrate_values\n    };\n};\nNetflixBitrateMenu.get_available_bitrates = () => {\n    const { bitrate_values } = NetflixBitrateMenu.get_html_elements();\n    return bitrate_values;\n};\nNetflixBitrateMenu.set_bitrate = async (value) => {\n    const { select, override_button } = NetflixBitrateMenu.get_html_elements();\n    select.value = value.toString();\n    override_button.click();\n};\n","export const get_local_datetime = (object) => {\n    const year = object.getFullYear();\n    const month = (object.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = object.getDate().toString().padStart(2, \"0\");\n    const hours = object.getHours().toString().padStart(2, \"0\");\n    const minutes = object.getMinutes().toString().padStart(2, \"0\");\n    const seconds = object.getSeconds().toString().padStart(2, \"0\");\n    const milliseconds = object.getMilliseconds().toString().padStart(3, \"0\");\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}`; // <-- Local datetime in extended ISO format ''YYYY-MM-DDTHH:MM:SS:XXX''\n};\nexport const get_local_datetime_and_timezone = (object) => {\n    // Get the datetime\n    const year = object.getFullYear();\n    const month = (object.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = object.getDate().toString().padStart(2, \"0\");\n    const hours = object.getHours().toString().padStart(2, \"0\");\n    const minutes = object.getMinutes().toString().padStart(2, \"0\");\n    const seconds = object.getSeconds().toString().padStart(2, \"0\");\n    const milliseconds = object.getMilliseconds().toString().padStart(3, \"0\");\n    const datetime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}`;\n    // Get timezone offset in +/- HH:MM format\n    const timezone_offset_min = object.getTimezoneOffset();\n    const offset_hrs = Math.abs(timezone_offset_min / 60);\n    const offset_min = Math.abs(timezone_offset_min % 60);\n    if (timezone_offset_min <= 0) {\n        const timezone_standard = \"+\" + offset_hrs.toString().padStart(2, \"0\") + \":\" + offset_min.toString().padStart(2, \"0\");\n        return datetime + timezone_standard;\n    }\n    else {\n        const timezone_standard = \"-\" + offset_hrs.toString().padStart(2, \"0\") + \":\" + offset_min.toString().padStart(2, \"0\");\n        return datetime + timezone_standard;\n    }\n};\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.h = () => (\"03777671a6fc5a01f8f7\")"],"names":[],"sourceRoot":""}