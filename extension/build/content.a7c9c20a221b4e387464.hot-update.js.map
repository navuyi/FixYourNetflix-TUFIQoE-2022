{"version":3,"file":"content.a7c9c20a221b4e387464.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnFA","sources":["webpack://fix-your-netflix-experiment-extension/./src/utils/classes/BitrateMenu.ts","webpack://fix-your-netflix-experiment-extension/webpack/runtime/getFullHash"],"sourcesContent":["import { CustomLogger } from \"./CustomLogger\";\nimport { invoke_bitrate_menu_and_get_html_elements } from \"../html_element_extractors/get_bitrate_menu_elements\";\nimport { simulate_bitrate_menu_hotkey } from \"../keyboard_hotkeys/simulate_bitrate_menu_hotkeys\";\nexport class BitrateMenu {\n    constructor() {\n        /**\n         *  Invokes bitrate menu and assings bitrate menu's HTML elements\n         *  to instance attributes.\n         *  Closes bitrate menu by simulating click event on Reset button.\n        */\n        this.init = async () => {\n            await this.invoke_bitrate_menu();\n            //this.reset_button.click()   <-- alternative way of closing the menu but it also resets the bitrates\n            simulate_bitrate_menu_hotkey(); // Close bitrate menu after initialization is finished\n        };\n        /**\n         *  Invokes bitrate_menu and reassigns HTML elements\n         *  Reassigning elements is important because bitrate menu is removed from DOM tree\n         *  after overriding bitrate value or reseting\n        */\n        this.invoke_bitrate_menu = async () => {\n            this.logger.log(\"Invoking bitrate menu...\");\n            // Invoke bitrate menu and get html elements\n            this.bitrate_menu_elements = await invoke_bitrate_menu_and_get_html_elements();\n            this.available_bitrates = this.bitrate_menu_elements.bitrate_values;\n            this.override_button = this.bitrate_menu_elements.override_button;\n            this.reset_button = this.bitrate_menu_elements.reset_button;\n            this.select = this.bitrate_menu_elements.select;\n            this.logger.log(\"Bitrate menu invoked.\");\n        };\n        /**\n         * Returns array of available bitrate values\n         * @returns {Array<number>} Available bitrate values\n        */\n        this.get_available_bitrates = () => {\n            return this.available_bitrates;\n        };\n        /**\n         * Returns HTML elements of bitrate menu\n         * @returns {T_BITRATE_MENU_ELEMENTS}\n        */\n        this.get_bitrate_menu_elements = () => {\n            if (this.bitrate_menu_elements) {\n                return this.bitrate_menu_elements;\n            }\n        };\n        /**\n         * Method checks if provided bitrate is available in bitrate menu.\n         * If it is then the same value is returned.\n         * If not - the closest value is found and returned.\n         * @param {number} bitrate\n         * @returns {number} Returns closest available bitrate to provided value\n        */\n        this.check_bitrate_availability = (bitrate) => {\n            if (this.available_bitrates.includes(bitrate)) {\n                return bitrate;\n            }\n            else {\n                this.logger.log(\"Provided bitrate is not available. Finding closest value...\");\n                const closest_bitrate = this.available_bitrates.reduce((prev, curr) => {\n                    return (Math.abs(curr - bitrate) < Math.abs(prev - bitrate) ? curr : prev);\n                });\n                this.logger.log(`Closest bitrate to ${bitrate} is ${closest_bitrate}`);\n                return closest_bitrate;\n            }\n        };\n        this.available_bitrates = [];\n        this.logger = new CustomLogger(\"[BitrateMenu]\");\n    }\n    /**\n     * Overrides current bitrate with new bitrate value\n     * provided as a parameter\n     * @param {number} bitrate\n    */\n    async set_bitrate(bitrate) {\n        if (this.select && this.override_button) {\n            console.\n                this.logger.log(`Setting bitrate to: ${bitrate}`);\n            this.select.value = bitrate.toString();\n            this.logger.log(`SELECTED BITRATE VALUE: ${this.select.value}`);\n            this.override_button.click();\n        }\n    }\n}\n","__webpack_require__.h = () => (\"b0f71e67172f9e180d2f\")"],"names":[],"sourceRoot":""}