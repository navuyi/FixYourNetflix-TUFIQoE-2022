{"version":3,"file":"background.fd0de6de920bf437e534.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA","sources":["webpack://fix-your-netflix-experiment-extension/./src/pages/Background/modules/Controller.ts","webpack://fix-your-netflix-experiment-extension/./src/utils/CustomLogger.ts","webpack://fix-your-netflix-experiment-extension/webpack/runtime/getFullHash"],"sourcesContent":["import { EXTENSION_MODE_AVAILABLE, STORAGE_KEYS } from \"../../../config/config\";\nimport { CustomLogger } from \"../../../utils/CustomLogger\";\nexport class Controller {\n    constructor() {\n        this.NETFLIX_WATCH_URL = \"https://www.netflix.com/watch\";\n        this.logger = new CustomLogger(\"[Controller]\");\n    }\n    async init() {\n        this.logger.log(\"Initializing...\");\n        this.listenForVideoStart();\n    }\n    async injectScript(tabId) {\n        const running = (await chrome.storage.local.get([STORAGE_KEYS.RUNNING]))[STORAGE_KEYS.RUNNING];\n        const mode = (await chrome.storage.local.get([STORAGE_KEYS.EXTENSION_MODE]))[STORAGE_KEYS.EXTENSION_MODE];\n        if (running === false) {\n            this.logger.log(\"Extension is not running.\");\n            return;\n        }\n        // Increase video count\n        /**\n         *\n        */\n        await this.increaseVideoCount();\n        // Define conent script file\n        let content_script;\n        if (mode === EXTENSION_MODE_AVAILABLE.EXPERIMENT) {\n            this.logger.log(\"Experiment mode detected. Switching to mainContentScript.bundle.js\");\n            content_script = \"mainContentScript.bundle.js\";\n        }\n        else if (mode === EXTENSION_MODE_AVAILABLE.MAPPING) {\n            this.logger.log(\"Mapping mode detected. Switching to mapperContentScript.bundle.js\");\n            content_script = \"mapperContentScript.bundle.js\";\n        }\n        else\n            (this.logger.log(\"Content script is incorrect!!!\"));\n        await chrome.scripting.executeScript({\n            target: {\n                tabId: tabId\n            },\n            files: [content_script] // ContentScript filename has to match names in webpack.config.js\n        });\n        this.logger.log(\"ContentScript has been injected\");\n    }\n    /**\n     *  Method that keeps track of videos order and limit.\n     *  For the first video in queue the count will be 1 but its index in an array is 0.\n     *  Video count is increased just before injecting the ContentScript.\n     *  It means that n-th video in row has the count of n for the enterity of playback. The index is n-1\n    */\n    async increaseVideoCount() {\n        const count = (await chrome.storage.local.get([STORAGE_KEYS.VIDEO_COUNT]))[STORAGE_KEYS.VIDEO_COUNT];\n        const new_count = count + 1;\n        this.logger.log(`Increasing video count to ${new_count}`);\n        await chrome.storage.local.set({\n            [STORAGE_KEYS.VIDEO_COUNT]: new_count\n        });\n    }\n    listenForVideoStart() {\n        // Code below seems to be the right solution //\n        // onHistoryStateUpdated detects navigation within Netlifx player (next video button)\n        /*\n        chrome.webNavigation.onHistoryStateUpdated.addListener((details) => {\n            this.logger.log(`ON HISTORY STATE UPDATED`)\n            console.log(details)\n            if(details.frameId === 0 && details.url.includes(this.NETFLIX_WATCH_URL)) {\n                chrome.tabs.get(details.tabId, async (tab) => {\n                    if(tab.url === details.url) {\n                        this.logger.log(\"Entered Netflix Video Player\")\n                        await this.injectScript(details.tabId)\n                    }\n                });\n            }\n        });\n        */\n        // onCompleted detects navigation using chrome.tabs.update\n        chrome.webNavigation.onCompleted.addListener(details => {\n            this.logger.log(`ON COMPLETED`);\n            this.logger.log(details);\n            if (details.frameId === 0 && details.url.includes(this.NETFLIX_WATCH_URL)) {\n                chrome.tabs.get(details.tabId, async (tab) => {\n                    if (tab.url === details.url) {\n                        this.logger.log(\"Entered Netflix Video Player\");\n                        await this.injectScript(details.tabId);\n                    }\n                });\n            }\n        });\n    }\n}\n","import { get_local_datetime } from \"./time_utils\";\nexport class CustomLogger {\n    constructor(prefix) {\n        this.log = (content) => {\n            const prefix_date = `${this.prefix} | ${get_local_datetime(new Date())} |`;\n            this.original_logger(prefix_date, content);\n        };\n        this.prefix = prefix;\n        this.original_logger = console.log;\n    }\n}\n","__webpack_require__.h = () => (\"370632cd0774a17088c5\")"],"names":[],"sourceRoot":""}